import static net.grinder.script.Grinder.grinder
import static org.junit.Assert.*
import static org.hamcrest.Matchers.*
import net.grinder.plugin.http.HTTPPluginControl;
import net.grinder.plugin.http.HTTPRequest
import net.grinder.script.GTest
import net.grinder.script.Grinder
import net.grinder.scriptengine.groovy.junit.GrinderRunner
import net.grinder.scriptengine.groovy.junit.annotation.BeforeThread
import net.grinder.scriptengine.groovy.junit.annotation.BeforeProcess
// import static net.grinder.util.GrinderUtils.* /** You can use this if you're using nGrinder after 3.2.3 */

import net.grinder.scriptengine.groovy.junit.annotation.Repeat;
import net.grinder.scriptengine.groovy.junit.annotation.RunRate;

import org.junit.BeforeClass
import org.junit.Ignore;
import org.junit.Test
import org.junit.runner.RunWith

import HTTPClient.HTTPResponse
import HTTPClient.NVPair

/**
 * A simple example using the HTTP plugin that shows the retrieval of a
 * single page via HTTP.
 *
 * This script is generated by devkook.tumblr.com
 *
 * @author devkook
 * @version 1.0.0
 */

@Repeat(10)
@RunWith(GrinderRunner)
class TestRunner {

	public static GTest test
	public static HTTPRequest request

	public static def keyList_1=[]
	public static def keyList_2=[]
	
	public static def keyList_1_size
	public static def keyList_2_size
	
	public def random = new Random()



	@BeforeProcess
	public static void beforeProcess() {

		def idlistFile = new File("key1.list")
		idlistFile.eachLine {
			keyList_1.push(it)
		}
		keyList_1_size = keyList_1.size()
		
		idlistFile = new File("key2.list")
		idlistFile.eachLine {
			keyList_2.push(it)
		}
		keyList_2_size = keyList_2.size()


		HTTPPluginControl.getConnectionDefaults().timeout = 6000
		test = new GTest(1, "Test1")
		request = new HTTPRequest()
		test.record(request)
		grinder.logger.info("before process.")
	}


	@BeforeThread
	public void beforeThread() {
		println "beforeThread"

		grinder.statistics.delayReports=true
		grinder.logger.info("before thread.")
	}

	@Ignore
	@Test
	public void test(){


		

		HTTPResponse result = request.GET("http://google.com")
		if (result.statusCode == 301 || result.statusCode == 302) {
			grinder.logger.warn("Warning. The response may not be correct. The response code was {}.", result.statusCode)
		} else {
			assertThat(result.statusCode, is(200))
		}
	}

	@RunRate(90)
	@Test
	public void 그룹01공격(){
		def id = keyList_1[random.nextInt(keyList_2_size)]
		println id
	}

	@RunRate(10)
	@Test
	public void 그룹02공격(){
		def id = keyList_2[random.nextInt(keyList_2_size)]
		println id
	}
}
